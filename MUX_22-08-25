MUX2:1:

`timescale 1ns / 1ps
module mux2to1(
    input a,
    input b,
    input s,
    output y
    );
    assign y=s?a:b;
endmodule

TEST_bench:

`timescale 1ns / 1ps
module tb_mux2to1();
    reg a, b, s;
    wire y;

    mux2to1 uut(.a(a), .b(b), .s(s), .y(y));

    initial 
    begin
        $monitor($time, " a=%b, b=%b, s=%b, y=%b", a, b, s, y);
        
        a = 0; b = 1; s = 0; #5;
        a = 0; b = 1; s = 1; #5;
        a = 1; b = 0; s = 0; #5;
        a = 1; b = 0; s = 1; #5;

        $finish;
    end
endmodule

MUX4:1

module mux4to1 (
    input [3:0] a,       
    input [1:0] sel,     
    output y             
);
    assign y = (sel == 2'b00) ? a[3] :
               (sel == 2'b01) ? a[2] :
               (sel == 2'b10) ? a[1] :
               a[0];
endmodule

TEST_bench:

`timescale 1ns / 1ps

module tb_mux4to1;
    reg [3:0] a;       
    reg [1:0] sel;     
    wire y;            

   
    mux4to1 uut (
        .a(a),
        .sel(sel),
        .y(y)
    );

    initial begin
       
        $display("Time\t a\t sel\t y");
        $monitor("%0t\t %b\t %b\t %b", $time, a, sel, y);

        // Test case 1:
        a = 4'b1010; sel = 2'b00; #10;

        // Test case 2:
        sel = 2'b01; #10;

        // Test case 3:
        sel = 2'b10; #10;

        // Test case 4: 
        sel = 2'b11; #10;

        // Change input and repeat
        a = 4'b1100; sel = 2'b00; #10;
        sel = 2'b01; #10;
        sel = 2'b10; #10;
        sel = 2'b11; #10;

        
        $finish;
    end
endmodule

MUX8:1 :

`include "mux21.v"
module mux8to1_using_2to1 (
    input wire [7:0] in,   // 8 input lines
    input wire [2:0] sel,  // 3-bit select
    output wire y
);
    wire [3:0] w1;
    wire [1:0] w2;
    
    // Level 1
    mux2to1 m1 (.a(in[0]), .b(in[1]), .sel(sel[0]), .y(w1[0]));
    mux2to1 m2 (.a(in[2]), .b(in[3]), .sel(sel[0]), .y(w1[1]));
    mux2to1 m3 (.a(in[4]), .b(in[5]), .sel(sel[0]), .y(w1[2]));
    mux2to1 m4 (.a(in[6]), .b(in[7]), .sel(sel[0]), .y(w1[3]));

    // Level 2
    mux2to1 m5 (.a(w1[0]), .b(w1[1]), .sel(sel[1]), .y(w2[0]));
    mux2to1 m6 (.a(w1[2]), .b(w1[3]), .sel(sel[1]), .y(w2[1]));

    // Level 3
    mux2to1 m7 (.a(w2[0]), .b(w2[1]), .sel(sel[2]), .y(y));
endmodule

TEST_bench:

`timescale 1ns / 1ps
module mux81_tb;
    reg [7:0] in;
    reg [2:0] sel;
    wire y;

    mux8to1_using_2to1 uut (
        .in(in),
        .sel(sel),
        .y(y)
    );

    initial begin
        $display("Time\tInput\tSel\tOutput");
        in = 8'b10101010;

        for (integer i = 0; i < 8; i = i + 1) begin
            sel = i[2:0];
            #10;
            $display("%0t\t%b\t%03b\t%b", $time, in, sel, y);
        end
        $finish;
    end
endmodule

