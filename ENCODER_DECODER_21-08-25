ENCODER4:2 :

module encoder4to2 (
  input [3:0] in,
  output reg [1:0] out
);

always @(*) begin   
  case (in)
    4'b0001: out = 2'b00;
    4'b0010: out = 2'b01;
    4'b0100: out = 2'b10;
    4'b1000: out = 2'b11;
    default: out = 2'bxx; 
  endcase
end

endmodule

TEST_bench:

`timescale 1ns / 1ps

module encoder4to2_tb;

  reg [3:0] in;
  wire [1:0] out;  

  // Instantiate the encoder module
  encoder4to2 uut (   
    .in(in),
    .out(out)
  );

  initial begin
    
    $display("Time\tInput\tOutput");
    $monitor("%0t\t%b\t%b", $time, in, out);

    
    in = 4'b0001; #10;  
    in = 4'b0010; #10;  
    in = 4'b0100; #10;  
    in = 4'b1000; #10;  

    //undefined
    in = 4'b1100; #10;  
    in = 4'b0000; #10; 

    $finish;
  end

endmodule

DECODER2:4 :

module decoder2to4 (
   input [1:0] in,
   input en,
   output reg [3:0] out
   );
   always @(*)begin
   if (en) begin
   case(in)
   2'b00:out=4'b0001;
   2'b01:out=4'b0010;
   2'b10:out=4'b0100;
   2'b11:out=4'b1000;
   default:out=4'bxxxx;
  endcase
 end else begin
   out=4'b0000;
  end
 end
endmodule

TEST_bench:
`timescale 1ns / 1ps

module decoder2to4_tb;

 
  reg [1:0] in;
  reg en;
  wire [3:0] out;

  decoder2to4 uut (
    .in(in),
    .en(en),
    .out(out)
  );

  initial begin
    
    $display("Time\t en in  | out");
    $monitor("%0t\t %b  %b  | %b", $time, en, in, out);

    
    en = 1;
    in = 2'b00; #10;
    in = 2'b01; #10;
    in = 2'b10; #10;
    in = 2'b11; #10;

    //enable 0
    en = 0;
    in = 2'b00; #10;
    in = 2'b01; #10;
    in = 2'b10; #10;
    in = 2'b11; #10;

    $finish;
  end

endmodule

